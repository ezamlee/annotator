// Code generated by Prisma (prisma@1.28.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  data: (where?: dataWhereInput) => Promise<boolean>;
  tag: (where?: tagWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  data: (where: dataWhereUniqueInput) => dataPromise;
  datas: (
    args?: {
      where?: dataWhereInput;
      orderBy?: dataOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<data>;
  datasConnection: (
    args?: {
      where?: dataWhereInput;
      orderBy?: dataOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => dataConnectionPromise;
  tag: (where: tagWhereUniqueInput) => tagPromise;
  tags: (
    args?: {
      where?: tagWhereInput;
      orderBy?: tagOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<tag>;
  tagsConnection: (
    args?: {
      where?: tagWhereInput;
      orderBy?: tagOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => tagConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createdata: (data: dataCreateInput) => dataPromise;
  updatedata: (
    args: { data: dataUpdateInput; where: dataWhereUniqueInput }
  ) => dataPromise;
  updateManydatas: (
    args: { data: dataUpdateManyMutationInput; where?: dataWhereInput }
  ) => BatchPayloadPromise;
  upsertdata: (
    args: {
      where: dataWhereUniqueInput;
      create: dataCreateInput;
      update: dataUpdateInput;
    }
  ) => dataPromise;
  deletedata: (where: dataWhereUniqueInput) => dataPromise;
  deleteManydatas: (where?: dataWhereInput) => BatchPayloadPromise;
  createtag: (data: tagCreateInput) => tagPromise;
  updatetag: (
    args: { data: tagUpdateInput; where: tagWhereUniqueInput }
  ) => tagPromise;
  updateManytags: (
    args: { data: tagUpdateManyMutationInput; where?: tagWhereInput }
  ) => BatchPayloadPromise;
  upserttag: (
    args: {
      where: tagWhereUniqueInput;
      create: tagCreateInput;
      update: tagUpdateInput;
    }
  ) => tagPromise;
  deletetag: (where: tagWhereUniqueInput) => tagPromise;
  deleteManytags: (where?: tagWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  data: (
    where?: dataSubscriptionWhereInput
  ) => dataSubscriptionPayloadSubscription;
  tag: (
    where?: tagSubscriptionWhereInput
  ) => tagSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type dataOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "hash_ASC"
  | "hash_DESC"
  | "text_ASC"
  | "text_DESC";

export type tagOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "name_ASC"
  | "name_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface dataCreateInput {
  hash: String;
  text?: String;
  annotations?: AnnotationCreateManyInput;
}

export type dataWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  hash?: String;
}>;

export interface tagCreateInput {
  type: String;
  name: String;
  values?: tagCreatevaluesInput;
}

export interface dataUpdateInput {
  hash?: String;
  text?: String;
  annotations?: AnnotationUpdateManyInput;
}

export interface tagWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  type?: String;
  type_not?: String;
  type_in?: String[] | String;
  type_not_in?: String[] | String;
  type_lt?: String;
  type_lte?: String;
  type_gt?: String;
  type_gte?: String;
  type_contains?: String;
  type_not_contains?: String;
  type_starts_with?: String;
  type_not_starts_with?: String;
  type_ends_with?: String;
  type_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: tagWhereInput[] | tagWhereInput;
}

export interface AnnotationCreateInput {
  name: String;
  value: String;
  count: Int;
}

export interface dataUpdateManyMutationInput {
  hash?: String;
  text?: String;
}

export interface AnnotationRestrictedWhereInput {
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  count?: Int;
  count_not?: Int;
  count_in?: Int[] | Int;
  count_not_in?: Int[] | Int;
  count_lt?: Int;
  count_lte?: Int;
  count_gt?: Int;
  count_gte?: Int;
  AND?: AnnotationRestrictedWhereInput[] | AnnotationRestrictedWhereInput;
}

export interface AnnotationUpdateManyDataInput {
  name?: String;
  value?: String;
  count?: Int;
}

export interface dataSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: dataWhereInput;
  AND?: dataSubscriptionWhereInput[] | dataSubscriptionWhereInput;
}

export interface AnnotationUpdateManyWithWhereNestedInput {
  where: AnnotationScalarWhereInput;
  data: AnnotationUpdateManyDataInput;
}

export interface tagUpdatevaluesInput {
  set?: String[] | String;
}

export interface AnnotationScalarWhereInput {
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  count?: Int;
  count_not?: Int;
  count_in?: Int[] | Int;
  count_not_in?: Int[] | Int;
  count_lt?: Int;
  count_lte?: Int;
  count_gt?: Int;
  count_gte?: Int;
  AND?: AnnotationScalarWhereInput[] | AnnotationScalarWhereInput;
  OR?: AnnotationScalarWhereInput[] | AnnotationScalarWhereInput;
  NOT?: AnnotationScalarWhereInput[] | AnnotationScalarWhereInput;
}

export interface tagCreatevaluesInput {
  set?: String[] | String;
}

export interface AnnotationWhereInput {
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  count?: Int;
  count_not?: Int;
  count_in?: Int[] | Int;
  count_not_in?: Int[] | Int;
  count_lt?: Int;
  count_lte?: Int;
  count_gt?: Int;
  count_gte?: Int;
  AND?: AnnotationWhereInput[] | AnnotationWhereInput;
}

export interface dataWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  hash?: String;
  hash_not?: String;
  hash_in?: String[] | String;
  hash_not_in?: String[] | String;
  hash_lt?: String;
  hash_lte?: String;
  hash_gt?: String;
  hash_gte?: String;
  hash_contains?: String;
  hash_not_contains?: String;
  hash_starts_with?: String;
  hash_not_starts_with?: String;
  hash_ends_with?: String;
  hash_not_ends_with?: String;
  text?: String;
  text_not?: String;
  text_in?: String[] | String;
  text_not_in?: String[] | String;
  text_lt?: String;
  text_lte?: String;
  text_gt?: String;
  text_gte?: String;
  text_contains?: String;
  text_not_contains?: String;
  text_starts_with?: String;
  text_not_starts_with?: String;
  text_ends_with?: String;
  text_not_ends_with?: String;
  annotations_some?: AnnotationWhereInput;
  annotations_every?: AnnotationRestrictedWhereInput;
  annotations_none?: AnnotationRestrictedWhereInput;
  AND?: dataWhereInput[] | dataWhereInput;
}

export interface AnnotationCreateManyInput {
  create?: AnnotationCreateInput[] | AnnotationCreateInput;
}

export interface AnnotationUpdateManyInput {
  create?: AnnotationCreateInput[] | AnnotationCreateInput;
  deleteMany?: AnnotationScalarWhereInput[] | AnnotationScalarWhereInput;
  updateMany?:
    | AnnotationUpdateManyWithWhereNestedInput[]
    | AnnotationUpdateManyWithWhereNestedInput;
}

export interface tagSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: tagWhereInput;
  AND?: tagSubscriptionWhereInput[] | tagSubscriptionWhereInput;
}

export type tagWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
}>;

export interface tagUpdateInput {
  type?: String;
  name?: String;
  values?: tagUpdatevaluesInput;
}

export interface tagUpdateManyMutationInput {
  type?: String;
  name?: String;
  values?: tagUpdatevaluesInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface tagPreviousValues {
  id: ID_Output;
  type: String;
  name: String;
  values: String[];
}

export interface tagPreviousValuesPromise
  extends Promise<tagPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<String>;
  name: () => Promise<String>;
  values: () => Promise<String[]>;
}

export interface tagPreviousValuesSubscription
  extends Promise<AsyncIterator<tagPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  values: () => Promise<AsyncIterator<String[]>>;
}

export interface Aggregatedata {
  count: Int;
}

export interface AggregatedataPromise
  extends Promise<Aggregatedata>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatedataSubscription
  extends Promise<AsyncIterator<Aggregatedata>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface dataSubscriptionPayload {
  mutation: MutationType;
  node: data;
  updatedFields: String[];
  previousValues: dataPreviousValues;
}

export interface dataSubscriptionPayloadPromise
  extends Promise<dataSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = dataPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = dataPreviousValuesPromise>() => T;
}

export interface dataSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<dataSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = dataSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = dataPreviousValuesSubscription>() => T;
}

export interface Aggregatetag {
  count: Int;
}

export interface AggregatetagPromise
  extends Promise<Aggregatetag>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatetagSubscription
  extends Promise<AsyncIterator<Aggregatetag>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface dataEdge {
  node: data;
  cursor: String;
}

export interface dataEdgePromise extends Promise<dataEdge>, Fragmentable {
  node: <T = dataPromise>() => T;
  cursor: () => Promise<String>;
}

export interface dataEdgeSubscription
  extends Promise<AsyncIterator<dataEdge>>,
    Fragmentable {
  node: <T = dataSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface tagConnection {
  pageInfo: PageInfo;
  edges: tagEdge[];
}

export interface tagConnectionPromise
  extends Promise<tagConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<tagEdge>>() => T;
  aggregate: <T = AggregatetagPromise>() => T;
}

export interface tagConnectionSubscription
  extends Promise<AsyncIterator<tagConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<tagEdgeSubscription>>>() => T;
  aggregate: <T = AggregatetagSubscription>() => T;
}

export interface dataPreviousValues {
  id: ID_Output;
  hash: String;
  text?: String;
}

export interface dataPreviousValuesPromise
  extends Promise<dataPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  hash: () => Promise<String>;
  text: () => Promise<String>;
}

export interface dataPreviousValuesSubscription
  extends Promise<AsyncIterator<dataPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  hash: () => Promise<AsyncIterator<String>>;
  text: () => Promise<AsyncIterator<String>>;
}

export interface dataConnection {
  pageInfo: PageInfo;
  edges: dataEdge[];
}

export interface dataConnectionPromise
  extends Promise<dataConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<dataEdge>>() => T;
  aggregate: <T = AggregatedataPromise>() => T;
}

export interface dataConnectionSubscription
  extends Promise<AsyncIterator<dataConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<dataEdgeSubscription>>>() => T;
  aggregate: <T = AggregatedataSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface Annotation {
  name: String;
  value: String;
  count: Int;
}

export interface AnnotationPromise extends Promise<Annotation>, Fragmentable {
  name: () => Promise<String>;
  value: () => Promise<String>;
  count: () => Promise<Int>;
}

export interface AnnotationSubscription
  extends Promise<AsyncIterator<Annotation>>,
    Fragmentable {
  name: () => Promise<AsyncIterator<String>>;
  value: () => Promise<AsyncIterator<String>>;
  count: () => Promise<AsyncIterator<Int>>;
}

export interface data {
  id: ID_Output;
  hash: String;
  text?: String;
  annotations?: <T = FragmentableArray<Annotation>>() => T;
}

export interface dataPromise extends Promise<data>, Fragmentable {
  id: () => Promise<ID_Output>;
  hash: () => Promise<String>;
  text: () => Promise<String>;
  annotations: <T = FragmentableArray<Annotation>>() => T;
}

export interface dataSubscription
  extends Promise<AsyncIterator<data>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  hash: () => Promise<AsyncIterator<String>>;
  text: () => Promise<AsyncIterator<String>>;
  annotations: <T = Promise<AsyncIterator<AnnotationSubscription>>>() => T;
}

export interface tagEdge {
  node: tag;
  cursor: String;
}

export interface tagEdgePromise extends Promise<tagEdge>, Fragmentable {
  node: <T = tagPromise>() => T;
  cursor: () => Promise<String>;
}

export interface tagEdgeSubscription
  extends Promise<AsyncIterator<tagEdge>>,
    Fragmentable {
  node: <T = tagSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface tag {
  id: ID_Output;
  type: String;
  name: String;
  values: String[];
}

export interface tagPromise extends Promise<tag>, Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<String>;
  name: () => Promise<String>;
  values: () => Promise<String[]>;
}

export interface tagSubscription
  extends Promise<AsyncIterator<tag>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  values: () => Promise<AsyncIterator<String[]>>;
}

export interface tagSubscriptionPayload {
  mutation: MutationType;
  node: tag;
  updatedFields: String[];
  previousValues: tagPreviousValues;
}

export interface tagSubscriptionPayloadPromise
  extends Promise<tagSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = tagPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = tagPreviousValuesPromise>() => T;
}

export interface tagSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<tagSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = tagSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = tagPreviousValuesSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "tag",
    embedded: false
  },
  {
    name: "Annotation",
    embedded: true
  },
  {
    name: "data",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
